교착 상태를 해결하는 방법 => 예방, 회피, 검출 추가적으로 교착 상태가 발견된 후에 자원을 회복하는 방법도 있음.

교착 상태 예방
-> 교착 상태를 유발하는 네가지 조건을 발생하지 않도록 무력화하는 방식.
-> 상호 배제, 비선점, 점유와 대기, 원형 대기라는 네가지 조건을 동시에 충족해야 발생 -> 하나라도 막으면 교착상태가 발생하지 않음
-> 하지만 실효성이 적어 잘 사용되지 않음

교착 상태 회피
-> 자원 할당량을 조절하여 교착 상태를 해결하는 방식.
->자원을 얼마만큼 할당해야 교착 상태가 발생하지 않는다는 보장이 없기 때문에 실효성이 적음

교착 상태 검출과 회복
-> 어떤 제약을 가하지 않고 자원 할당 그래프를 모니터링하면서 교착 상태가 발생하는지 살펴보는 방식
-> 교착 상태가 발생하면 교착 상태 회복 단계가 진행됨
-> 교착 상태를 검출한 후 이를 회복시키는 것은 결론적으로 교착 상태를 해결하는 현실적인 접근 방법

교착 상태 예방
  * 상호 배제 예방
  -> 독점적으로 사용할 수 있는 자원을 없애버리는 방법
  -> 시스템 내의 모든 자원을 공유할 수 있다면 교착 상태가 발생하지 않지만, 현실적으로 모든 자원을 공유하는 것은 불가능 함
  
  * 비선점 예방
  -> 모든 자원을 빼앗을 수 있도록 만드는 방법
  -> 어떤 기준으로 빼앗을지 등의 기준을 결정하기 어려움
  -> 그렇다 보니 아사 현상에 빠지기 쉬움. 아사 현상은 에이징으로 해결할 수 있으나 우선순위가 낮은 프로세스가 몇 번을 양보한 끝에 무조건 자원을 사용한다고 가정하면
     이 프로세스가 점유하고 있는 자원은 비선점 자원이 되어 다시 교착 상태에 빠질 수 있음. 따라서 비선점 조건을 무력화하기 어려움
     
  * 점유와 대기 예방
  -> 프로세스가 자원을 점유한 상태에서 다른 자원을 기다리지 못하게 하는 방법
  -> 전부 할당하거나 아니면 아예 할당하지 않는 방식을 적용
  -> 상호 배제 예방과 비선점 예방은 자원에 대한 제약을 풀어버리는 것
  -> 임계구역으로 보호받는 자원에 대한 제약은 풀기가 어렵다.
  -> 점유와 대기 예방의 단점으론 
    1. 프로세스가 자신이 사용하는 모든 자원을 자세히 알기 어렵다.
    2. 자원의 활용성이 떨어진다.
    3. 많은 자원을 사용하는 프로세스가 적은 자원을 사용하는 프로세스보다 불리하다.
    4. 결국 일괄 작업 방식으로 동작한다.
    
   * 원형 대기 예방
   -> 점유와 대기를 하는 프로세스들이 원형을 이루지 못하도록 막는 방법
   -> 자원을 한 방향으로만 사용하도록 설정함으로써 원형 대기를 예방
   -> 원형 대기 예방은 모든 자원을 할당받아야 실행할 수 있는 점유와 대기 예방보다 완화된 방법
   -> 단점
     1. 프로세스 작업 진행에 유연성이 떨어진다.
     2. 자원의 번호를 어떻게 부여할 것인지가 문제다.
     
   * 교착 상태 예방 정리
   -> 앞서 나타난 네가지 조건이 일어나지 않도록 제약을 가하는 방법
   -> 자원을 보호하기 위해 상호 배제와 비선점을 예방하기 어려우며 점유와 대기, 원형 대기는 프로세스 작업 방식을 제한하고 자원을 낭비하기 때문에 사용할 수 없다.
   
교착 상태 회피
-> 프로세스에 자원을 할당할 때 어느 수준 이상의 자원을 나누어주면 교착 상태가 발생하는지 파악하여 그 수준 이하로 자원을 나누어주는 방법.
-> 자원을 많이 할당할수록 교착 상태가 발생할 확률이 커진다. 교착 상태 회피는 자원의 총수와 현재 할당된 자원의 수를 기준으로 시스템을 안정 상태와 불안정 상태로 나누고
   시스템이 안정 상태를 유지하도록 자원을 할당한다.
-> 교착상태 회피는 안정 상태를 유지할 수 있는 범위 내에서 자원을 할당함으로써 교착 상태를 피한다.

은행원 알고리즘
-> 은행이 대출을 해주는 방식, 즉 대출 금액이 대출 가능한 범위 내이면(안정 상태) 허용되지만 그렇지 않으면 거부되는 것과 유사하여 이렇게 불림
-> 각 프로세스는 자신이 사용할 자원의 최대수를 운영체제에 알려준다. 운영체제가 자원을 할당할 때 시스템의 상태를 파악하는데 꼭 필요한 정보기 때문
-> 은행원 알고리즘의 변수
   1. 전체 자원 : 시스템 내 전체 자원의 수
   2. 가용 자원 : 시스템 내 현재 사용할 수 있는 자원의 수(가용 자원 = 전체자원 - 모든 프로세스의 할당자원)
   3. 최대 자원 : 각 프로세스가 선언한 최대 자원의 수
   4. 할당 자원 : 각 프로세스에 현재 할당된 자원의 수
   5. 기대 자원 : 각 프로세스가 앞으로 사용할 자원의 수 (기대 자원 = 최대 자원 - 할당 자원)
   
-> 각 프로세스의 기대 자원과 비교하여 가용 자원이 하나라도 크거나 같으면 자원을 할당. 가용 자원이 기대자원보다 크다는 것은 그 자원을 사용하여 작업을 끝낼 수 있는 프로세스가
   있다는 의미이므로 안정 상태다.
-> 가용 자원이 어떤 기대 자원보다 크지 않으면 할당하지 않는다. 가용 자원을 사용하여 작업을 마칠 수 있는 프로세스가 없다는 의미이므로 불안정 상태다.

교착 상태 회피의 문제점
-> 교착 상태 회픠의 원칙 : 교착 상태가 발생하지 않을 수준까지만 자원을 나누어 주는 것
-> 아래와 같은 문제로 교착 상태 회피를 사용하지 않음
  1. 프로세스가 자신이 사용할 모든 자원을 미리 선언해야한다.
  2. 시스템의 전체 자원 수가 고정적이어야 한다.
  3. 자원이 낭비된다.
  
교착 상태 검출
-> 교착 상태 예방은 실제로 구현이 어려움.
-> 교착 상태 해결 방법 중 가장 현실적인 것은 교착 상태 검출임
-> 운영체제가 프로세스의 작업을 관찰하면서 교착 상태 발생 여부를 계속 주시하는 방식.
 
 타임아웃을 이용한 교착 상태 검출
 -> 일정 시간 동안 작업이 진행되지 않은 프로세스를 교착 상태가 발생한 것으로 간주하여 처리하는 방법
  아래와 같은 문제가 있음
   1. 엉뚱한 프로세스가 강제 종료될 수 있다.
   2. 모든 시스템에 적용할 수 없다.
   
  이와 같은 문제에도 타임아웃은 대부분의 데이터베이스와 운영체제가 많이 선호함.
  프로그램이 응답이 없어 종료합니다 라는 알림창이 이 타임아웃을 이용한 방법임
  -> 타임아웃으로 데이터의 일관성이 깨지는 문제를 해결하기 위해 데이터베이스에서는 체크포인트와 롤백을 사용
  -> 체크포인트 : 작업을 하다가 문제가 발생하면 저장된 상태로 되돌아오기 위한 표시
  -> 스냅숏 : 체크포인트를 설정하면 현재의 시스템 상태가 하드디스크에 저장되는데 그 저장된 데이터를 뜻함
  -> 롤백 : 작업을 하다가 문제가 발생하여 과거의 체크포인트로 되돌아가는 것
  
  이러한 방식은 운영체제에도 적용됨
  
자원 할당 그래프를 이용한 교착 상태 검출
-> 자원 할당 그래프를 보면 시스템 내의 프로세스가 어떤 자원을 사용하고 있는지 혹은 기다리고 있는지 알 수 있다.

교착 상태 회복
-> 교착 상태가 검출되면 교착 상태를 푸는 후속 작업을 하는데 이를 교착 상태 회복이라고 한다.
-> 프로세스를 강제로 종료하는 방법
   1. 교착 상태를 일으킨 모든 프로세스를 동시에 종료
   2. 교착 상태를 일으킨 프로세스 중 하나를 골라 순서대로 종료
     *어떤 프로세스부터 종료할 것인지는 다음과 같은 기준이 필요
      -> 우선순위가 낮은 프로세스를 먼저 종료
      -> 우선순위가 같은 경우 작업 시간이 짧은 프로세스 먼저 종료
      -> 위의 두 조건이 같은 경우 자원을 많이 사용하는 프로세스를 먼저 종료

교착 상태 회복단계에서는 관련 프로세스를 강제로 종료하는 일뿐 아니라 강제 종료된 프로세스가 실행되기 전에 시스템을 복구하는 일도 해야함.
시스템 복구는 명령어가 실행될 때마다 체크포인트를 만들어 가장 최근의 검사 시점으로 돌아가는 식인데 이 방법은 작업량이 상당하므로 시스템에 부하를 주기 때문에 무분별하게
사용하지 말고 선택적으로 사용해야함
  

  
