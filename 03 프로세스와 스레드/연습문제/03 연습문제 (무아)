# 연습문제
#### 1.프로그램이 프로세스가 되려면 운영체제로부터 무엇을 받아야 하는가?
프로세스 제어 블록<br>
* 프로세스 제어 블록에 있는 대표적인 세 가지 정보 [프로세스 구분자, 메모리 관련 정보, 각종 중간값]
* 프로그램이 프로세스가 되려면 메모리에 올라오는 것과 동시에 프로세스 제어 블록이 생성되어야 한다.

#### 2.프로세스의 상태 중 CPU를 할당받기 위해 기다리는 상태는 무엇인가? 
준비 상태 - CPU가 하나인 컴퓨터에서는 한 번에 하나의 프로세스만 실행할 수 있기 때문에 자기 실행 순서가 될 때까지 기다려야 한다. <br>

#### 3.프로세스의 상태 중 입출력 작업을 하기 위해 이동하는 상태는 무엇인가? 
대기 상태 - 입출력을 요구한 프로세스를 실행 상태에 두지 않고 대기 상태에 두는데 이는 작업의 효율성을 높이기 위해서이다. <br>

#### 4.CPU 스케줄러가 준비 상태에 있는 프로세스 중 하나를 골라 CPU를 할당하는 작업을 무엇이라고 하는가?
디스패치<br>

#### 5.유닉스에서 ```Ctrl``` + ```Z``` 키를 눌러 프로세스가 중단되면 프로세스는 어떤 상태로 바뀌는가?
휴식상태 - 프로세스가 작업을 일시적으로 쉬고 있는 상태이다.<br>
유닉스에서 프로그램을 강제로 종료하려면 ```Ctrl```+```z```를 누른다. <br>

#### 6.실행 상태에서 하나의 프로세스가 나가고 새로운 프로세스가 들어오는 상황을 무엇이라고 하는가?
문맥교환 - CPU를 차지하던 프로세스가 나가고 새로운 프로세스를 받아들이는 작업을 말한다. <br>

#### 7.실행 중인 프로세스로부터 새로운 프로세스를 복사하는 시스템 호출을 무엇인가? 
fork() - 이 때 실행하던 프로세스는 부모 프로세스, 새로 생긴 프로세스는 자식 프로세스로서 부모-자식 관계가 된다.<br>

#### 8.프로세스의 골격은 그대로 둔 채 코드 영역만 바꾸는 시스템 호출은 무엇인가?
exec() - 현재의 프로세스가 완전히 다른 프로세스로 전환된다. 목적: 프로세스의 구조체 재활용 <br>

#### 9.부모 프로세스가 기다리지 않아 자원이 회수되지 못하고 계속 살아 있는 프로세스는 무엇인가? 
고아 프로세스 혹은 좀비 프로세스: 자원이 낭비됨으로써 효율적인 운영에 방해가 된다. <br>
exit()이나 return()을 씀으로써 자식 프로세스가 끝났음을 알려줌으로써 부모 프로세스와 동기화할 수 있다.<br>

#### 10.프로세스의 코드에 정의된 절차에 따라 CPU에 작업 요청을 하는 실행 단위로서 가벼운 프로세스라고 불리는 것은 무엇인가? 
스레드 <br>


#### 11. 고아 프로세스를 방지하기 위해 부모 프로세스는 어떤 시스템 호출을 사용하는가? 
wait() <br>

#### 12. 작업이 끝난 프로세스의 자원을 회수하는 행위를 무엇이라고 하는가? 
자원 회수<br>

#### 13. 모든 프로세스를 부모-자식 관계로 만들어 자원 회수를 용이하게 만드는 프로세스의 구조는 무엇인가?
프로세스의 계층 구조<br>

# 심화문제
#### 1. 다섯 가지 프로세스 상태도를 그리시오. 

![Screen Shot 2022-08-28 at 2 40 02 PM](https://user-images.githubusercontent.com/77275707/187059418-f7693005-a3e3-4190-8623-f1d99dda7fd0.png)

#### 2. 프로세스의 상태 중 휴식 상태와 보류 상태에 대해 설명하시오. 
* 휴식 상태는 프로세스가 작업을 일시적으로 쉬고 있는 상태이다. 프로그램이 종료된 것처럼 보이지만 사실은 실행을 잠시 멈춘 것이다. 프로세스 상태: 정지
* 보류 상태는 프로세스가 메모리에서 잠시 쫓겨난 상태로 휴식 상태와 차이가 있다. 프로세스 상태: 일시정지 상태
  * 메모리가 꽉 차서 일부 메모리를 메모리 밖으로 내보내야 할 때
  * 프로그램에 오류가 있어서 실행을 미루어야 할 때 
  * 바이러스와 같이 악의적인 공격을 하는 프로세스라고 판단될 때
  * 매우 긴 주기로 반복되는 프로세스라 메모리 밖으로 쫓아내도 큰 문제가 없을 때
  * 입출력을 기다리는 프로세스의 입출력이 게속 지연될 때

#### 3. 프로세스의 제어 블록의 구성에 대해 설명하시오. 
* 프로세스 제어 블록은 프로세스를 실행하는데 필요한 중요한 정보를 보관하는 자료 구조로 TCB라고도 한다. 모든 프로세스는 고유의 프로세스 제어 블록을 가지며 프로세스 제어 블록은 프로세스 생성 시 만들어져서 프로세스가 실행을 완료하면 폐기된다. 
* 포인터: 프로세스 제어 블록의 첫번째 블록에 저장되며 준비 상태나 대기 상태는 큐로 운영되는데 프로세스 제어 블록을 연결하여 준비 상태나 대기 상태의 큐를 구현할 때 사용된다.
* 프로세스 상태: 프로세스가 어떤 상태에 있는지를 나타내며 생성, 준비, 실행, 대기, 보류 준비, 보류 대기 등이 있다.
* 프로세스 구분자: 운영체제 내에 있는 여러 프로세스를 구별하기 위한 구분자를 저장한다.
* 프로세스 카운터: 다음에 실행될 명령어의 위치를 가리키는 프로그램 카운터의 값을 저장한다. 
* 프로세스 우선순위: 다양한 우선순위의 프로세스가 대기 상태로 들어오기 때문에 대기 상태의 큐도 우선순위별로 따로 운영된다. CPU 스케줄러가 준비 상태에 있는 프로세스 중 실행 상태로 옮겨야 할 프로세스를 선택할 때는 프로세스 우선순위를 기준으로 삼는다. 높은 우선순위의 프로세스가 낮은 우선순위의 프로세스보다 먼저 실행되고 더 자주 실행된다.
* 각종 레지스터 정보: 프로세스가 실행중에 사용하던 각종 레지스터의 값이 저장된다. 이전에 실행할 때 사용한 레지스터의 값을 보관해야 다음에 실행할 수 있기 때문에 자신이 사용하던 레지스터의 중간값을 보관한다. 
* 메모리 관리 정보: 프로세스가 메모리의 어디에 있는지 나타내는 메모리 위치 정보, 메모리 보호를 위해 사용하는 경계 레지스터 값과 한계 레지스터 값 등이 저장된다. 
* 할당된 자원 정보: 프로세스를 실행하기 위해 사용하는 입출력 자원이나 입출력 자원이나 오픈 파일등에 대한 정보를 말한다. 
* 계정 정보: 계정 번호, CPU 할당시간, CPU 사용 시간 등을 말한다.
* 부모 프로세스 구분자와 자식 프로세스 구분자: CPID 정보도 저장된다.

<img width="210" alt="Screen Shot 2022-08-28 at 2 49 16 PM" src="https://user-images.githubusercontent.com/77275707/187059680-7c758786-edda-49ae-828d-d6581ca118b1.png">

#### 4. 문맥 교환에 대해 설명하시오. 
CPU를 차지하던 프로세스가 나가고 새로운 프로세스를 받아들이는 작업을 말한다. 실행 상태에서 나가는 프로세스 제어 블록에는 지금까지의 작업 내용이 저장되고 반대로 실행 상태로 들어오는 프로세스제어 블록의 내용으로 CPU가 다시 세팅된다.<br>
<img width="621" alt="Screen Shot 2022-08-28 at 4 28 34 PM" src="https://user-images.githubusercontent.com/77275707/187063042-df0daf9e-e46d-4109-9022-0ef05d15df74.png">

#### 5. 프로세스를 구성하는 코드 영역, 데이터 영역, 스택 영역에 대해 설명하시오.
* 코드영역: 프로그램의 본문이 기술된 곳으로 텍스트 영역이라고 한다. 
* 데이터영역: 코드가 실행되면서 사용하는 변수나 파일 등의 각종 데이터를 모아놓은 곳이다. 
* 스택영역: 운영체제가 프로세스를 실행하기 위해 부수적으로 필요한 데이터를 모아놓은 곳이다. 

#### 6. fork() 시스템 호출의 장점을 설명하시오. 
fork() 시스템 호출은 실행 중인 프로세스로부터 새로운 프로세스를 복사하는 함수이다. <br>
* 새로운 프로그램을 실행하는 게 아니라 기존의 복사하여 실행하기 때문에 처음 프로그램을 실행하는 속도보다 훨씬 빠르다.
* 추가 작업 없이 자원을 상속할 수 있다. 
* 시스템 관리를 효율적으로 할 수 있다.

#### 7. exec() 시스템 호출을 사용하는 이유를 설명하시오. 
exec() 시스템 호출은 프로세스는 그대로 둔 채 내용만 바꾸는 시스템 호출이다. 현재의 프로세스가 완전히 다른 프로세스 된다. 
목적은 프로세스의 구조체를 재활용하기 위함이다. <br>
exec()호출을 사용하면 이미 만들어진 프로세스 제어 블록, 메모리 영역, 부모-자식 관계를 그대로 사용할 수 있어서 편리하고 새로운 코드 영역만 가져오면 되기 때문에 운영체제의 작업이 수월하다.<br>

#### 8. 프로세스 계층 구조의 장점을 설명하시오.
동시에 여러 작업을 처리하고 종료된 프로세스의 자원을 회수하는데 용이하다.<br>

#### 9. 멀티스레드, 멀티태스킹, 멀티프로세싱, CPU 멀티스레드를 비교하여 설명하시오. 

* 멀티스레드: 멀티스레드는 프로세스 내 작업을 여러 개의 스레드로 분할함으로써 작업의 부담을 줄이는 프로세스 운영 기법이다.
* 멀티태스킹: 운영체제가 CPU에 작업을 줄 때 시간을 잘게 나누어 배분하는 기법이다. 
* 멀티프로세싱: CPU를 여러 개 사용하여 여러 개의 스레드를 동시에 처리하는 작업 환경을 말한다.
* CPU 멀티스레드: 한번에 하나씩 처리해야 하는 스레드를 파이프라인 기법을 이용하여 동시에 여러 스레드를 처리하도록 만든 병렬 처리 기법이다. 
